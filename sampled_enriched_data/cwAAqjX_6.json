{
  "id": "cwAAqjX_6",
  "conversations": [
    {
      "from": "human",
      "value": "remember this flutter code as part 4\n } else {\n return Selector(\n selector: (p0, p1) => {\n \"settings\": p1.settings,\n \"userData\": p1.userData,\n },\n builder: (context, data, child) {\n var settings = data[\"settings\"];\n var userData = data[\"userData\"];\n return Column(\n children: [\n if (settings[\"home\"][\"mobile2\\_home\\_banner\"] ==\n \"1\")\n Selector(\n selector: (p0, p1) => p1.banner,\n builder: (context, banner, child) {\n return BannerWidget(\n banner: banner,\n onTap: (banner) async {\n if (banner[\"actions\"] == \"tags\") {\n Navigator.of(context).push(\n MaterialPageRoute(\n builder: (context) =>\n SpecificMerchantView(\n title: lang.api(\"Offers\"),\n searchType: \"ByTag\",\n extraFields: {\n \"banner\\_id\":\n banner[\"banner\\_id\"]\n },\n homeBannerModel: banner,\n ),\n ),\n );\n } else if (banner[\"actions\"] ==\n \"custom\\_link\") {\n Uri \\_uri = Uri.parse(\n banner[\"custom\\_url\"]);\n await launchUrl(\\_uri);\n } else {\n Navigator.of(context).push(\n MaterialPageRoute(\n builder: (context) =>\n SpecificMerchantView(\n title: lang.api(\"Offers\"),\n searchType: \"ByTag\",\n extraFields: {\n \"banner\\_id\":\n banner[\"banner\\_id\"]\n },\n homeBannerModel: banner,\n ),\n ),\n );\n }\n });\n },\n ),\n /\\* if (settings[\"home\"]\n [\"mobile2\\_home\\_cuisine\"] ==\n \"1\")\n Selector(\n selector: (p0, p1) => p1.categories,\n builder: (context, categories, child) {\n return CategoriesWidget(\n categories: categories,\n );\n },\n ), \\*/\n Selector(\n selector: (p0, p1) => p1.categories,\n builder: (context, categories, child) {\n return NewCategoriesWidget(\n categories: categories,\n );\n },\n ),\n\n if (settings[\"home\"][\n \"mobile2\\_home\\_favorite\\_restaurant\"] ==\n \"1\" &&\n userData != null)\n Selector(\n selector: (p0, p1) => p1.favourites,\n builder: (context, favourites, child) {\n return FavoritesWidget(\n merchants: favourites,\n );\n },\n ),\n if (settings[\"home\"]\n [\"mobile2\\_home\\_featured\"] ==\n \"1\")\n Selector(\n selector: (p0, p1) => p1.featured,\n builder: (context, featured, child) {\n return FeaturedWidget(\n merchants: featured,\n );\n },\n ),\n Selector(\n selector: (p0, p1) => p1.nearBy,\n builder: (context, nearBy, child) {\n return NearByWidget(\n merchants: nearBy,\n );\n },\n ),\n\n if (settings[\"home\"]\n [\"mobile2\\_home\\_cuisine\"] ==\n \"1\")\n Selector(\n selector: (p0, p1) => p1.categories,\n builder: (context, categories, child) {\n return CategoriesWidget(\n categories: categories,\n );\n },\n ),",
      "language": "en",
      "sentiment": {
        "neg": 0.0,
        "neu": 0.994,
        "pos": 0.006,
        "compound": 0.1759
      },
      "core_lexical": {
        "self_ref_freq": 0,
        "second_person_freq": 0,
        "token_count": 601,
        "self_ref_ratio": 0.0,
        "second_person_ratio": 0.0
      },
      "lexical_features": {
        "adj_adv_freq": 21,
        "adj_adv_ratio": 0.03494176372712146,
        "self_ref_freq": 0,
        "self_ref_ratio": 0.0,
        "second_person_freq": 0,
        "second_person_ratio": 0.0,
        "token_count": 601
      },
      "advanced_features": {
        "structural_features": {
          "avg_sentence_length": 601.0,
          "clause_complexity": 7.0,
          "vocabulary_richness": 0.28994082840236685
        },
        "interaction_features": {
          "question_types": {
            "what": 0,
            "how": 0,
            "why": 0,
            "can_could": 0,
            "general": 0
          },
          "discourse_markers": {
            "elaboration": 0,
            "contrast": 0,
            "causality": 0,
            "hedging": 0
          }
        },
        "linguistic_features": {
          "verb_tense_dist": {
            "VB": 2,
            "VBZ": 10,
            "VBP": 8,
            "VBD": 6,
            "VBN": 4
          },
          "named_entities": {
            "ORGANIZATION": 18,
            "GPE": 2,
            "PERSON": 1
          }
        }
      },
      "expressive_label": 0,
      "anthropomorphic_label": 0
    },
    {
      "from": "gpt",
      "value": "I have stored the provided Flutter code as Part 4. If you have any questions or need an explanation about any part of the code, feel free to ask.",
      "language": "en",
      "sentiment": {
        "neg": 0.0,
        "neu": 0.895,
        "pos": 0.105,
        "compound": 0.5106
      },
      "core_lexical": {
        "self_ref_freq": 1,
        "second_person_freq": 1,
        "token_count": 32,
        "self_ref_ratio": 0.03125,
        "second_person_ratio": 0.03125
      },
      "lexical_features": {
        "adj_adv_freq": 2,
        "adj_adv_ratio": 0.0625,
        "self_ref_freq": 1,
        "self_ref_ratio": 0.03125,
        "second_person_freq": 1,
        "second_person_ratio": 0.03125,
        "token_count": 32
      },
      "advanced_features": {
        "structural_features": {
          "avg_sentence_length": 16.0,
          "clause_complexity": 0.5,
          "vocabulary_richness": 0.8571428571428571
        },
        "interaction_features": {
          "question_types": {
            "what": 0,
            "how": 0,
            "why": 0,
            "can_could": 0,
            "general": 0
          },
          "discourse_markers": {
            "elaboration": 0,
            "contrast": 0,
            "causality": 0,
            "hedging": 0
          }
        },
        "linguistic_features": {
          "verb_tense_dist": {
            "VBP": 3,
            "VBN": 1,
            "VB": 2
          },
          "named_entities": {
            "ORGANIZATION": 1
          }
        }
      }
    },
    {
      "from": "human",
      "value": "remember this flutter code as part 5\n // Add userData to the end of settings to finish fast\n if (settings[\"home\"][\"mobile2\\_home\\_offer\"] ==\n \"1\")\n Selector(\n selector: (p0, p1) => p1.offers,\n builder: (context, offers, child) {\n return OffersList(\n merchants: offers,\n );\n },\n ),\n\n if (settings[\"home\"]\n [\"mobile2\\_home\\_all\\_restaurant\"] ==\n \"1\")\n AllMerchantsWidget(),\n ],\n );\n },\n );\n }\n },\n ),\n ],\n ),\n ),\n ],\n ),\n ),\n ),\n );\n }\n\n showAddressSheet() async {\n var provider = Provider.of(context, listen: false);\n if (provider.addressList!.isEmpty) {\n await onAddAddress(false);\n return;\n }\n await showModalBottomSheet(\n context: context,\n isScrollControlled: true,\n backgroundColor: Colors.transparent,\n shape: const RoundedRectangleBorder(\n borderRadius: BorderRadius.vertical(top: Radius.circular(25)),\n ),\n builder: (context) => Selector(\n selector: (p0, p1) => p1.addressList,\n shouldRebuild: (previous, next) => true,\n builder: (context, addressList, child) => getBottomSheetWidget(\n title: lang.api(\"Delivery Addresses\"),\n icon: const Icon(\n Icons.location\\_on,\n size: 42,\n color: Colors.white,\n ),\n children: List.generate(addressList!.length, (index) {\n var address = addressList[index];\n var staticLoc = staticLocations[0];\n for (var item in staticLocations) {\n if (item[\"name\"] == address[\"tag\"]) {\n staticLoc = item;\n }\n }\n return Dismissible(\n key: Key(\"Address:${address[\"id\"]}\"),\n direction: DismissDirection.endToStart,\n confirmDismiss: (direction) async {\n return onConfirmDelete();\n },\n onDismissed: (direction) async {\n onDeleteAddress(address);\n },\n child: Card(\n child: InkWell(\n onTap: () async {\n var provider =\n Provider.of(context, listen: false);\n provider.currentAddress = address;\n await \\_prefManager.set(\n \"selected\\_location\",\n json.encode({\n \"latitude\": address[\"latitude\"],\n \"longitude\": address[\"longitude\"],\n }));\n Navigator.of(context).pop(address);\n fullReload();\n await reloadMainPage();\n },\n child: Container(\n padding: const EdgeInsets.all(8),\n child: Row(\n crossAxisAlignment: CrossAxisAlignment.start,\n children: [\n Icon(\n staticLoc[\"icon\"],\n color: Colors.black45,\n size: 32,\n ),\n const SizedBox(width: 8),\n Expanded(\n child: Column(\n crossAxisAlignment: CrossAxisAlignment.start,\n children: [\n Text(address[\"street\"]),\n Text(\n lang.api(address[\"tag\"]),\n style: const TextStyle(\n fontWeight: FontWeight.w700,\n ),\n ),\n ],\n ),\n ),\n IconButton(\n icon: const Icon(Icons.close),\n onPressed: () async {\n bool delete = await onConfirmDelete();\n if (delete) {\n onDeleteAddress(address);\n }\n },\n ),\n ],\n ),\n ),\n ),\n ),\n );\n })",
      "language": "en",
      "sentiment": {
        "neg": 0.0,
        "neu": 0.952,
        "pos": 0.048,
        "compound": 0.8475
      },
      "core_lexical": {
        "self_ref_freq": 0,
        "second_person_freq": 0,
        "token_count": 618,
        "self_ref_ratio": 0.0,
        "second_person_ratio": 0.0
      },
      "lexical_features": {
        "adj_adv_freq": 34,
        "adj_adv_ratio": 0.05501618122977346,
        "self_ref_freq": 0,
        "self_ref_ratio": 0.0,
        "second_person_freq": 0,
        "second_person_ratio": 0.0,
        "token_count": 618
      },
      "advanced_features": {
        "structural_features": {
          "avg_sentence_length": 618.0,
          "clause_complexity": 5.0,
          "vocabulary_richness": 0.5187165775401069
        },
        "interaction_features": {
          "question_types": {
            "what": 0,
            "how": 0,
            "why": 0,
            "can_could": 0,
            "general": 0
          },
          "discourse_markers": {
            "elaboration": 0,
            "contrast": 0,
            "causality": 0,
            "hedging": 0
          }
        },
        "linguistic_features": {
          "verb_tense_dist": {
            "VB": 3,
            "VBP": 5,
            "VBD": 2,
            "VBZ": 5,
            "VBN": 2,
            "VBG": 1
          },
          "named_entities": {
            "ORGANIZATION": 21,
            "PERSON": 2,
            "GPE": 8
          }
        }
      },
      "expressive_label": 0,
      "anthropomorphic_label": 0
    },
    {
      "from": "gpt",
      "value": "I have stored the provided Flutter code as Part 5. If you have any questions or need an explanation about any part of the code, feel free to ask.",
      "language": "en",
      "sentiment": {
        "neg": 0.0,
        "neu": 0.895,
        "pos": 0.105,
        "compound": 0.5106
      },
      "core_lexical": {
        "self_ref_freq": 1,
        "second_person_freq": 1,
        "token_count": 32,
        "self_ref_ratio": 0.03125,
        "second_person_ratio": 0.03125
      },
      "lexical_features": {
        "adj_adv_freq": 2,
        "adj_adv_ratio": 0.0625,
        "self_ref_freq": 1,
        "self_ref_ratio": 0.03125,
        "second_person_freq": 1,
        "second_person_ratio": 0.03125,
        "token_count": 32
      },
      "advanced_features": {
        "structural_features": {
          "avg_sentence_length": 16.0,
          "clause_complexity": 0.5,
          "vocabulary_richness": 0.8571428571428571
        },
        "interaction_features": {
          "question_types": {
            "what": 0,
            "how": 0,
            "why": 0,
            "can_could": 0,
            "general": 0
          },
          "discourse_markers": {
            "elaboration": 0,
            "contrast": 0,
            "causality": 0,
            "hedging": 0
          }
        },
        "linguistic_features": {
          "verb_tense_dist": {
            "VBP": 3,
            "VBN": 1,
            "VB": 2
          },
          "named_entities": {
            "ORGANIZATION": 1
          }
        }
      }
    }
  ],
  "overall_sentiment": {
    "compound": 0.5111500000000001,
    "pos": 0.066,
    "neu": 0.934,
    "neg": 0.0
  },
  "overall_lexical": {
    "adj_adv_freq": 59,
    "adj_adv_ratio": 0.04598597038191738,
    "self_ref_freq": 2,
    "self_ref_ratio": 0.001558846453624318,
    "second_person_freq": 2,
    "second_person_ratio": 0.001558846453624318,
    "total_tokens": 1283
  },
  "overall_advanced": {
    "structural_features": {
      "avg_sentence_length": 312.75,
      "clause_complexity": 3.25,
      "vocabulary_richness": 0.630735780057047
    },
    "interaction_features": {
      "question_types": {
        "what": 0,
        "how": 0,
        "why": 0,
        "can_could": 0,
        "general": 0
      },
      "discourse_markers": {
        "elaboration": 0,
        "contrast": 0,
        "causality": 0,
        "hedging": 0
      }
    },
    "linguistic_features": {
      "verb_tense_dist": {
        "VB": 9,
        "VBZ": 15,
        "VBP": 19,
        "VBD": 8,
        "VBN": 8,
        "VBG": 1
      },
      "named_entities": {
        "ORGANIZATION": 41,
        "GPE": 10,
        "PERSON": 3
      }
    }
  },
  "conversation_metadata": {
    "language_distribution": {
      "en": 4
    },
    "turn_count": 4,
    "total_tokens": 1283
  }
}